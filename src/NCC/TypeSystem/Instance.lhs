{--------------------------------------------------------------------------------------------------
                                           Cada Compiler                                           
                                       Michael Benjamin Gale                                       
--------------------------------------------------------------------------------------------------}

> module TypeSystem.Instance (
>   Instance(..),
>   ppInstance
> ) where

    {----------------------------------------------------------------------}
    {-- Module Imports                                                    -}
    {----------------------------------------------------------------------}

>   import Cada.AST (Equation)
    
>   import TypeSystem.Kind
>   import TypeSystem.Types

>   import Utility.PrettyPrint
    
    {----------------------------------------------------------------------}
    {-- Class Instances                                                   -}
    {----------------------------------------------------------------------}   
    
>   data Instance = Inst {
>       instType  :: Qual MonoType,
>       instDict  :: [Equation]
>   }

    {----------------------------------------------------------------------}
    {-- Pretty Printing                                                   -}
    {----------------------------------------------------------------------} 
    
>   ppInstance :: String -> Instance -> ShowS
>   ppInstance n (Inst (ctx :=> mt) eqs) =
>       showString "instance " .
>       ppContext ctx .
>       showString n .
>       ppSpace .
>       ppMonoType 10 mt
    
{--------------------------------------------------------------------------------------------------
                                            End of File                                            
--------------------------------------------------------------------------------------------------}          
